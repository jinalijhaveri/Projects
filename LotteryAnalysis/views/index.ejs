<!DOCTYPE html>
<html>
<head>
<title>Lottery Analysis</title>
<link rel='stylesheet' href='/stylesheets/style.css' />
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script>
 	function test1()
 	{
 		$(".chart").remove();

 		$.get("/showGraph", function(movieList)
 		{
 		
 			console.log(movieList);
 			var json = movieList;
 			
 			var margin = {top: 20, right: 20, bottom: 30, left: 40},
 	    	width = 960 - margin.left - margin.right,
 	    	height = 500 - margin.top - margin.bottom;
 			
 			var results,data = [],chart,bars;
 	 
 	    	results = d3.map( json );
 	    	results.forEach( function( key, val ) {
 	        	var result = {};
 	        	result.num1 = parseInt( val.num1);
 	        	result.cnt = parseInt( val.cnt);
 	        	data.push( result );
 	    	} );
 	    	
 	    	var x = d3.scale.ordinal().rangeRoundBands([0, width], .1).domain(json.map(function(d) { return d.num1; }));
 	 		
 			var y = d3.scale.linear().range([height, 0]).domain([0, d3.max(json, function(d) { return d.cnt; })]);
 	    	
 	    	// x.domain(results.map(function(d) { return d.num1; }));
 	    	// y.domain([0, d3.max(results, function(d) { return d.cnt; })]);
 	    
 	   		chart = d3.select( 'body' ).append( 'svg' )
       				.attr( 'class', 'chart' )
       				.attr("width", width + margin.left + margin.right)
    				.attr("height", height + margin.top + margin.bottom)
       				.append('g')
        			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 	   		
 	   		

 
  	 		chart.selectAll(".bar")
   				.data(data)
 				.enter().append("rect")
   				.attr("class", "bar")
   				.attr("x", function(d) { return x(d.num1); })
   				.attr("width", x.rangeBand())
   				.attr("y", function(d) { return y(d.cnt); })
   				.attr("height", function(d) { return height - y(d.cnt); })
				.append("title").text(function(d) { return d.cnt; });


 			
 			
 			
 			var xAxis = d3.svg.axis().scale(x).orient("bottom");

  	 		chart.append('g').attr('class', 'x axis').attr("transform", "translate(0," + height + ")").call(xAxis);
  	 		  	 		
  	 		var yAxis = d3.svg.axis().scale(y).orient("left");
   			

  	 		chart.append("g")
			.attr("class", "y axis")
			.call(yAxis)
			.append("text")
			.attr("transform", "rotate(-90)")
			.attr("y", 6)
			.attr("dy", ".71em")
			.style("text-anchor", "end")
			.text("Frequency");
   			
 		});
 		
 	}
 	
 	function showNumFrequency(){
 		$(".chart").remove();
 		$.get("/mostFreqNum", function(resultData)
 		 		{
 		 			console.log(resultData);
 		 			var json = resultData;
 		 			
 		 			var margin = {top: 20, right: 20, bottom: 30, left: 40},
 		 	    	width = 960 - margin.left - margin.right,
 		 	    	height = 500 - margin.top - margin.bottom;
 		 			
 		 			var results,data = [],chart,bars;
 		 	 
 		 	    	results = d3.map( json );
 		 	    	results.forEach( function( key, val ) {
 		 	        	var result = {};
 		 	        	result.num = parseInt( val.num);
 		 	        	result.frequency = parseInt( val.frequency);
 		 	        	data.push( result );
 		 	    	} );
 		 	    	
 		 	    	var x = d3.scale.ordinal().rangeRoundBands([0, width], .1).domain(json.map(function(d) { return d.num; }));
 		 	 		
 		 			var y = d3.scale.linear().range([height, 0]).domain([0, d3.max(json, function(d) { return d.frequency; })]);
 		 	    	
 		 	    
 		 	   		chart = d3.select( 'body' ).append( 'svg' )
 		       				.attr( 'class', 'chart' )
 		       				.attr("width", width + margin.left + margin.right)
 		    				.attr("height", height + margin.top + margin.bottom)
 		       				.append('g')
 		        			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 		 	   		
 		 	   		

 		 
 		  	 		chart.selectAll(".bar")
 		   				.data(data)
 		 				.enter().append("rect")
 		   				.attr("class", "bar")
 		   				.attr("x", function(d) { return x(d.num); })
 		   				.attr("width", x.rangeBand())
 		   				.attr("y", function(d) { return y(d.frequency); })
 		   				.attr("height", function(d) { return height - y(d.frequency); })
 		   				.append("title").text(function(d) { return d.frequency; });

 		 			
 		 			
 		 			
 		 			var xAxis = d3.svg.axis().scale(x).orient("bottom");
 		 			var yAxis = d3.svg.axis().scale(y).orient("left");

 		  	 		chart.append('g').attr('class', 'x axis').attr("transform", "translate(0," + height + ")").call(xAxis);
 		  	 		
 		   			

 		  	 		chart.append("g")
 					.attr("class", "y axis")
 					.call(yAxis)
 					.append("text")
 					.attr("transform", "rotate(-90)")
 					.attr("y", 6)
 					.attr("dy", ".71em")
 					.style("text-anchor", "end")
 					.text("Frequency");
 		   			
 		 		});
 	}
 	
 	function showDuo(){
 		
 		console.log("Inside duo");
 		$.get('/duos',function(data){
 		 var margin = { top: 50, right: 0, bottom: 100, left: 30 },
         width = 960 - margin.left - margin.right,
         height = 1100 - margin.top - margin.bottom,
         gridSize = Math.floor(width / 47),
         legendElementWidth = gridSize*2,
         buckets = 9,
         colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
         days = ["1", "2", "3", "4", "5", "6", "7","8","9","10","11","12","13","14","15","16","17","18","19", "20", "21", "22", "23", "24", "25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"],
         times = ["1", "2", "3", "4", "5", "6", "7","8","9","10","11","12","13","14","15","16","17","18","19", "20", "21", "22", "23", "24", "25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"];
 		 
 		 console.log("Width_______"+width);
 		 console.log(gridSize);
 		/* var data = [
 		           {day: 1,hour:1,    value: 16},
 		           {day: 1,hour:2,    value: 20},
 		           {day: 1,hour:3,    value: 0},
 		           {day: 2,hour:1,    value: 6},
 		           {day: 2,hour:2,    value: 2},
 		           {day: 2,hour:3,    value: 0},
 		           {day: 8,hour:3,value :4},
 		          	{day: 40,hour:30,value :40},
 		         	{day: 43,hour:24,value :26},
 		        	{day: 45,hour:40,value :16},
 		       		{day: 46,hour:20,value :3},
 		      		{day: 46,hour:11,value :4},
 		     		{day: 47,hour:30,value :33}
 		         ];
 		 */ 
 	
 		 
 		 
 		var colorScale = d3.scale.quantile()
        .domain([0, buckets - 1, d3.max(data, function (d) { return d.count; })])
        .range(colors);

    var svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var dayLabels = svg.selectAll(".dayLabel")
        .data(days)
        .enter().append("text")
          .text(function (d) { return d; })
          .attr("x", 0)
          .attr("y", function (d, i) { return i * gridSize; })
          .style("text-anchor", "end")
          .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
          .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });
    
    var timeLabels = svg.selectAll(".timeLabel")
    .data(times)
    .enter().append("text")
      .text(function(d) { return d; })
      .attr("x", function(d, i) { return i * gridSize; })
      .attr("y", 0)
      .style("text-anchor", "middle")
      .attr("transform", "translate(" + gridSize / 2 + ", -6)")
      .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });

	var heatMap = svg.selectAll(".num1")
    .data(data)
    .enter().append("rect")
    .attr("x", function(d) { return (d.num1 - 1) * gridSize; })
    .attr("y", function(d) { return (d.num2 - 1) * gridSize; })
    .attr("rx", 4)
    .attr("ry", 4)
    .attr("class", "hour bordered")
    .attr("width", gridSize)
    .attr("height", gridSize)
    .style("fill", colors[0]);
	
	 heatMap.transition().duration(1000)
     .style("fill", function(d) { return colorScale(d.count); });

 heatMap.append("title").text(function(d) { return " "+d.num1+","+d.num2; });
 
 var legend = svg.selectAll(".legend")
 .data([0].concat(colorScale.quantiles()), function(d) { return d; })
 .enter().append("g")
 .attr("class", "legend");

legend.append("rect")
.attr("x", function(d, i) { return legendElementWidth * i; })
.attr("y", height)
.attr("width", legendElementWidth)
.attr("height", gridSize / 2)
.style("fill", function(d, i) { return colors[i]; });

legend.append("text")
.attr("class", "mono")
.text(function(d) { return ">= " + Math.round(d); })
.attr("x", function(d, i) { return legendElementWidth * i; })
.attr("y", height + gridSize);

 		});

 	}
 	
 	
 	function showAverageDaysForWinNum()
 	
 	{
 		$.get("/showAverageDaysForWinNum", function(resultData)
 		 {
 			var margin = {top: 20, right: 20, bottom: 30, left: 50},
 		    width = 960 - margin.left - margin.right,
 		    height = 500 - margin.top - margin.bottom;

 		var x = d3.scale.linear()
 		    .range([0, width]);

 		var y = d3.scale.linear()
 		    .range([height, 0]);

 		var xAxis = d3.svg.axis()
 		    .scale(x)
 		    .orient("bottom");

 		var yAxis = d3.svg.axis()
 		    .scale(y)
 		    .orient("left");

 		var line = d3.svg.line()
 		    .x(function(d) { return x(d.key); })
 		    .y(function(d) { return y(d.days); });

 		var svg = d3.select("body").append("svg")
 		    .attr("width", width + margin.left + margin.right)
 		    .attr("height", height + margin.top + margin.bottom)
 		  .append("g")
 		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 		
 		
 			var results,data = [],chart,bars;
 			
 			console.log(resultData);
			var json = resultData;
			
			
		 	 
 	    	results = d3.map( json );
 	    	results.forEach( function( key, val ) {
 	        	var result = {};
 	        	result.key = parseInt( val.key);
 	        	result.days = parseInt( val.days);
 	        	data.push( result );
 	    	} );

 		/*d3.tsv("data.tsv", function(error, data) {
 		  data.forEach(function(d) {
 		    d.date = parseDate(d.date);
 		    d.close = +d.close;
 		  });*/

 		  x.domain(d3.extent(data, function(d) { return d.key; }));
 		  y.domain(d3.extent(data, function(d) { return d.days; }));

 		  svg.append("g")
 		      .attr("class", "x axis")
 		      .attr("transform", "translate(0," + height + ")")
 		      .call(xAxis);

 		  svg.append("g")
 		      .attr("class", "y axis")
 		      .call(yAxis)
 		    .append("text")
 		      .attr("transform", "rotate(-90)")
 		      .attr("y", 6)
 		      .attr("dy", ".71em")
 		      .style("text-anchor", "end")
 		      .text("Average Days Between Wins");

 		  svg.append("path")
 		      .datum(data)
 		      .attr("class", "line")
 		      .attr("d", line);
 			
 		 });
 	}
 	
 </script>

</head>
<body>
	<p>Welcome to Lottery Analysis</p>
	<input type="button" onclick="test1()" value="test" />
	<input type="button" onclick="showNumFrequency()" value="Num Frequency" />
	<input type="button" onclick="showDuo()" value="Duo" />
	<input type="button" onclick="showAverageDaysForWinNum()" value="Average Days"/>
	<div id="chart"></div>
</body>
</html>